import "tfplan"

# Get all AWS vpcs from all modules
get_vpcs = func() {
    vpcs = []
    for tfplan.module_paths as path {
        vpcs += values(tfplan.module(path).resources.aws_vpc) else []
    }
    return vpcs 
}
  
vpcs = get_vpcs()

print("VPC created: ", vpcs)
  
vpc_dnshostnames_check = rule {
  all vpcs as name, instances {
    all instances as index, r {
      r.applied.enable_dns_hostnames == true
    }
  }
}

if vpc_dnshostnames_check is true {
  print("Policy validation successful; DNS Hostname property is enabled") } else { print("Policy Validation failure; DNS Hostname property is disabled") }

vpc_dnssupport_check = rule {
  all vpcs as name, instances {
    all instances as index, r {
      r.applied.enable_dns_support == true
    }
  }
}

if vpc_dnssupport_check is true {
  print("Policy validation successful; DNS Hostname support is enabled") } else { print("Policy Validation failure; DNS Hostname support is disabled") }

vpc_ipv6_check = rule {
    all vpcs as name, instances {
        all instances as index, r {
            r.applied.assign_generated_ipv6_cidr_block == false
        }
    }
}

if vpc_ipv6_check is true {
  print("Policy validation successful; IPV6 is disabled") } else { print("Policy Validation failure; IPV6 is enabled") }

tag_count = rule {
    all vpcs as name, instances {
        all instances as index, r {
            (length(r.applied.tags) else 0) > 1
        }
    }
}

if tag_count is true {
  print("Policy validation successful; Tags are present") } else { print("Policy Validation failure; Tags are missing") }

main = rule { (vpc_dnshostnames_check and vpc_ipv6_check and vpc_dnssupport_check and tag_count) else true }